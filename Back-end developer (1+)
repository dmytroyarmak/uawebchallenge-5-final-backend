Back-end developer (1+)

Опис
Спробуйте себе в ролі розробника додатків для ігрового всесвіту Wargaming.net.

Завдання
Створити сервіс збору бойової статистики гравців World Of Tanks, використовуючи Wargaming.net API ( http://ru.wargaming.net/developers/ ) .

Вимоги:
Сервіс повинен реалізовувати методи:
1.         Метод збору актуальної статистики гравця:
приймає аргументом ідентифікатор гравця ( " account_id ") і ініціює збір бойової статистики ( "   statistics        " ) гравця за весь час ( " all ") і список техніки в ангарі.
зібрана інформація повинна зберігатися в сховищі даних із зазначенням дати збору.
2.         Метод отримання статистики гравця за період часу:
приймає аргументом ідентифікатор гравця, дату початку і кінця періоду і видає різницю по кожному з показників статистики ( " statistics ") і вивчену за цей період нову техніку з описом ( " localized_name " , " max_health " , " weight " , " engine_power " , " circular_vision_radius " ).
формат відповіді - на ваш розсуд.

3.         Протокол виклику методів - HTTP, обробка методів - асинхронна .

4.         Сервіс не повинен дозволяти зберегти невалідні / биті дані. Мінімальний набір валідаторів :
значення у свіжих даних > = старих значень
кількість боїв > = кількості перемог .

Допоміжна інформація:
1.         Використовувані методи API: account / info - статистика гравця , account / tanks - список техніки в ангарі , encyclopedia / tankinfo - опис техніки.
2.         API Explorer - https://ru.wargaming.net/developers/api_explorer/.
3.         Для отримання ідентифікаторів активних гравців, можна скористатися методом ratings / top.

Критерії оцінки:
1.         Архітектура сервісу логічно розділена на блоки і дозволяє легко розширювати функціональність.
2.         Сховище даних легко масштабується, ефективно використовує RAM і місце на диску.
3.         Реалізовано функціонал запитів до API.
4.         Реалізовано повторний запуск запитів до API при виникненні помилок ( таймаут і т.д.).
5.         Реалізований механізм отримання статистики гравця і вивченої техніки за період часу.
6.         Реалізований механізм зберігання статистики гравця.

Плюсом буде :
1.         Обробка і логінування помилок.
2.         Критичний функціонал покритий Unit-тестами.

Back-end developer (1+)

Описание
Попробуйте себя в роли разработчика приложений для игровой вселенной Wargaming.net.

Задание
Создать сервис сбора боевой статистики игроков World Of Tanks, используя Wargaming.net API (http://ru.wargaming.net/developers/).

Требования:
Сервис должен реализовывать методы:
1.        Метод сбора актуальной статистики игрока:
принимает аргументом идентификатор игрока (“account_id”) и инициирует сбор боевой статистики (“statistics”) игрока за все время (“all”) и список техники в ангаре;
собранная информация должна сохраняться в хранилище данных с указанием даты сбора.
2.        Метод получения статистики игрока за период времени:
принимает аргументом идентификатор игрока, дату начала и конца периода и выдает разницу по каждому из показателей статистики (“statistics”) и изученную за этот период новую технику с описанием (“localized_name”, “max_health”, “weight”, “engine_power”, “circular_vision_radius”);
формат ответа – на ваше усмотрение.
3.        Протокол вызова методов – HTTP, обработка методов – асинхронная.
4.        Сервис не должен позволять сохранить невалидные/битые данные. Минимальный набор валидаторов:
значения в свежих данных >= старых значений;
количество боев >= количеству побед.

Вспомогательная информация:
1.        Используемые методы API: account/info – статистика игрока, account/tanks – список техники в ангаре, encyclopedia/tankinfo – описание техники.
2.        API Explorer - https://ru.wargaming.net/developers/api_explorer/.
3.        Для получения идентификаторов активных игроков, можно воспользоваться методом ratings/top.

Критерии оценки:
1.        Архитектура сервиса логично разделена на блоки и позволяет легко расширять функциональность.
2.        Хранилище данных легко масштабируется, эффективно использует RAM и место на диске.
3.        Реализован функционал запросов к API.
4.         Реализован повторный запуск запросов к API при возникновении ошибок (таймаут и т.д.).
5.        Реализован механизм получения статистики игрока и изученной техники за период времени.
6.         Реализован механизм хранения статистики игрока.

Плюсом будет:
1.         Обработка и логирование ошибок.
2.         Критический функционал покрыт Unit-тестами.
